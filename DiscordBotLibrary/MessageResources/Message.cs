using DiscordBotLibrary.EmbedResources;
using DiscordBotLibrary.ReactionResources;

namespace DiscordBotLibrary.MessageResources
{
    /// <summary>
    /// Represents a message sent in a channel within Discord.
    /// </summary>
    public record Message
    {
        /// <summary>
        /// id of the message
        /// </summary>
        [JsonPropertyName("id")]
        [JsonConverter(typeof(SnowflakeConverter))]
        public ulong Id { get; init; }

        /// <summary>
        /// id of the channel the message was sent in
        /// </summary>
        [JsonPropertyName("channel_id")]
        [JsonConverter(typeof(SnowflakeConverter))]
        public ulong ChannelId { get; init; }

        /// <summary>
        /// the author of this message (not guaranteed to be a valid user, see below)
        /// </summary>
        [JsonPropertyName("author")]
        public User Author { get; init; } = default!;

        /// <summary>
        /// contents of the message
        /// </summary>
        [JsonPropertyName("content")]
        public string Content { get; init; } = default!;

        /// <summary>
        /// when this message was sent
        /// </summary>
        [JsonPropertyName("timestamp")]
        public DateTimeOffset Timestamp { get; init; }

        /// <summary>
        /// when this message was edited (or null if never)
        /// </summary>
        [JsonPropertyName("edited_timestamp")]
        public DateTimeOffset? EditedTimestamp { get; init; }

        /// <summary>
        /// whether this was a TTS message
        /// </summary>
        [JsonPropertyName("tts")]
        public bool Tts { get; init; }

        /// <summary>
        /// whether this message mentions everyone
        /// </summary>
        [JsonPropertyName("mention_everyone")]
        public bool MentionEveryone { get; init; }

        /// <summary>
        /// users specifically mentioned in the message
        /// </summary>
        [JsonPropertyName("mentions")]
        public User[] Mentions { get; init; } = default!;

        /// <summary>
        /// roles specifically mentioned in this message
        /// </summary>
        [JsonPropertyName("mention_roles")]
        public Role[] MentionRoles { get; init; } = default!;

        /// <summary>
        /// channels specifically mentioned in this message
        /// </summary>
        [JsonPropertyName("mention_channels")]
        public ChannelMention[]? MentionChannels { get; init; }

        /// <summary>
        /// any attached files
        /// </summary>
        [JsonPropertyName("attachments")]
        public MessageAttachment[] Attachments { get; init; } = default!;

        /// <summary>
        /// any embedded content
        /// </summary>
        [JsonPropertyName("embeds")]
        public Embed[] Embeds { get; init; } = default!;

        /// <summary>
        /// reactions to the message
        /// </summary>
        [JsonPropertyName("reactions")]
        public Reaction[]? Reactions { get; init; }

        /// <summary>
        /// used for validating a message was sent
        /// </summary>
        [JsonPropertyName("nonce")]
        public string? Nonce { get; init; }

        /// <summary>
        /// whether this message is pinned
        /// </summary>
        [JsonPropertyName("pinned")]
        public bool Pinned { get; init; }

        /// <summary>
        /// if the message is generated by a webhook, this is the webhook's id
        /// </summary>
        [JsonPropertyName("webhook_id")]
        [JsonConverter(typeof(SnowflakeConverter))]
        public ulong? WebhookId { get; init; }

        /// <summary>
        /// type of message
        /// </summary>
        [JsonPropertyName("type")]
        public int Type { get; init; }

        /// <summary>
        /// sent with Rich Presence-related chat embeds
        /// </summary>
        [JsonPropertyName("activity")]
        public MessageActivity? Activity { get; init; }

        /// <summary>
        /// sent with Rich Presence-related chat embeds
        /// </summary>
        [JsonPropertyName("application")]
        public Application? Application { get; init; }

        /// <summary>
        /// if the message is an Interaction or application-owned webhook, this is the id of the application
        /// </summary>
        [JsonPropertyName("application_id")]
        [JsonConverter(typeof(SnowflakeConverter))]
        public ulong? ApplicationId { get; init; }

        /// <summary>
        /// message flags combined as a bitfield
        /// </summary>
        [JsonPropertyName("flags")]
        public MessageFlags? Flags { get; init; }

        /// <summary>
        /// data showing the source of a crosspost, channel follow add, pin, or reply message
        /// </summary>
        [JsonPropertyName("message_reference")]
        public MessageReference? MessageReference { get; init; }

        /// <summary>
        /// the message associated with the message_reference. This is a minimal subset of fields in a message (e.g. author is excluded.)
        /// </summary>
        [JsonPropertyName("message_snapshots")]
        public MessageSnapshot[]? MessageSnapshots { get; init; }

        /// <summary>
        /// the message associated with the message_reference
        /// </summary>
        [JsonPropertyName("referenced_message")]
        public Message? ReferencedMessage { get; init; }

        /// <summary>
        /// Sent if the message is sent as a result of an interaction
        /// </summary>
        [JsonPropertyName("interaction_metadata")]
        public InteractionMetadata? InteractionMetadata { get; init; }

        /// <summary>
        /// Deprecated in favor of interaction_metadata; sent if the message is a response to an interaction
        /// </summary>
        [JsonPropertyName("interaction")]
        [Obsolete("Deprecated in favor of interaction_metadata")]
        public MessageInteraction? Interaction { get; init; }

        /// <summary>
        /// the thread that was started from this message, includes thread member object
        /// </summary>
        [JsonPropertyName("thread")]
        public Channel? Thread { get; init; }

        /// <summary>
        /// sent if the message contains components like buttons, action rows, or other interactive components
        /// </summary>
        [JsonPropertyName("components")]
        public MessageComponent[]? Components { get; init; }

        /// <summary>
        /// sent if the message contains stickers
        /// </summary>
        [JsonPropertyName("sticker_items")]
        public StickerItem[]? StickerItems { get; init; }

        /// <summary>
        /// Deprecated the stickers sent with the message
        /// </summary>
        [JsonPropertyName("stickers")]
        public Sticker[]? Stickers { get; init; }

        /// <summary>
        /// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread
        /// </summary>
        [JsonPropertyName("position")]
        public int? Position { get; init; }

        /// <summary>
        /// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message
        /// </summary>
        [JsonPropertyName("role_subscription_data")]
        public RoleSubscriptionData? RoleSubscriptionData { get; init; }

        /// <summary>
        /// data for users, members, channels, and roles in the message's auto-populated select menus
        /// </summary>
        [JsonPropertyName("resolved")]
        public Resolved? Resolved { get; init; }

        /// <summary>
        /// A poll!
        /// </summary>
        [JsonPropertyName("poll")]
        public Poll? Poll { get; init; }

        /// <summary>
        /// the call associated with the message
        /// </summary>
        [JsonPropertyName("call")]
        public MessageCall? Call { get; init; }

        /// <summary>
        /// If this is <c>true</c>: <see cref="WebhookId"/> == <c>null</c>
        /// </summary>
        public bool IsValidUser => WebhookId == null;

        /// <summary>
        /// If <see cref="Type"/> is AUTO_MODERATION_ACTION(24), the message can only be deleted if the bot has the MANAGE_MESSAGE permission"/> 
        /// </summary>
        public bool IsMessageDeletable => Type is > 5 or 1 and not 21;
    }
}
